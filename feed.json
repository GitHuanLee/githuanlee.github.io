{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lee",
    "subtitle": "生活笔记",
    "icon": "http://blog.huanlee.cn/images/favicon.ico",
    "description": "见习码农",
    "home_page_url": "http://blog.huanlee.cn",
    "items": [
        {
            "id": "http://blog.huanlee.cn/computer-science/java/SpringBoot%E7%BD%91%E5%85%B3%E5%AF%B9%E5%A4%96%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D/",
            "url": "http://blog.huanlee.cn/computer-science/java/SpringBoot%E7%BD%91%E5%85%B3%E5%AF%B9%E5%A4%96%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D/",
            "title": "SpringBoot网关对外接口签名",
            "date_published": "2020-12-05T09:24:40.000Z",
            "content_html": "<div class=\"note info\">\n<p>在需要提供对外接口时，通过一系列验证方式保证安全性</p>\n</div>\n<h1 id=\"接口签名的作用\"><a class=\"anchor\" href=\"#接口签名的作用\">#</a> 接口签名的作用</h1>\n<pre><code>当我们产品在遇到需要提供对外接口的情况，我们想要保证接口的安全性，既能够保证数据的安全，又能防止被人暴力破坏，我们可以选择在对外接口上增加验证方式，来保证对外接口的安全性。\n</code></pre>\n<h1 id=\"接口签名的思路\"><a class=\"anchor\" href=\"#接口签名的思路\">#</a> 接口签名的思路</h1>\n<pre><code>传统对内接口，我们的验证方式为：对用户身份信息进行验证，（即：cookie中包含服务端sessionID或Token令牌），那么对于公开的对外接口，我们也可以用大致相同的思路，首先接口调用方，需要获取我们平台颁发给他的`appKey`和`appSecret`（可以理解为：用户名和密码），然后为了防止直接使用密钥传输会被抓包窃取数据，那么我们需要规定一种双方都能通过密钥得出的对称加密方式，这样只需要每次在接口上传递加密后的密码串，就能保证安全性。\n</code></pre>\n<h1 id=\"接口签名的代码实现\"><a class=\"anchor\" href=\"#接口签名的代码实现\">#</a> 接口签名的代码实现</h1>\n<h2 id=\"首先我们需要一个存储用户信息的表\"><a class=\"anchor\" href=\"#首先我们需要一个存储用户信息的表\">#</a> 首先我们需要一个存储用户信息的表</h2>\n<pre><code class=\"language-java\">public class RestApiAuth implements Serializable &#123;\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * app key\n     */\n    private String appkey;\n\n    /**\n     * app secret\n     */\n    private String appsecret;\n\n    private Date createTime;\n\n    private Date updateTime;\n    /**\n     * 是否启用(1:是 0:否)\n     */\n    private Integer enabled;\n    /**\n     * 备注\n     */\n    private String remark;\n&#125;\n</code></pre>\n<h2 id=\"对外接口用户信息增删查改\"><a class=\"anchor\" href=\"#对外接口用户信息增删查改\">#</a> 对外接口用户信息增删查改</h2>\n<pre><code class=\"language-java\">public interface IRestApiAuthService extends IService&lt;RestApiAuth&gt; &#123;\n\n    public RestApiAuth getRestApiAuthByAppkey(String appkey);\n&#125;\n\n@Service\npublic class RestApiAuthServiceImpl extends ServiceImpl&lt;RestApiAuthMapper, RestApiAuth&gt; implements IRestApiAuthService &#123;\n\n    @Override\n    public RestApiAuth getRestApiAuthByAppkey(String appkey) &#123;\n        QueryWrapper&lt;RestApiAuth&gt; wrapper = new QueryWrapper&lt;RestApiAuth&gt;()\n                .eq(&quot;appkey&quot;, appkey);\n        return super.getOne(wrapper);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"加密签名规则\"><a class=\"anchor\" href=\"#加密签名规则\">#</a> 加密签名规则</h2>\n<pre><code>那么我们需要规定，在所有对外接口中，需要在http请求的头部信息中包含签名验证参数。我们定义4个必传参数为：\n</code></pre>\n<ol>\n<li>appkey：颁发给用户的 appKey</li>\n<li>noncestr：随机字符串</li>\n<li>timestamp：发起请求时间秒数</li>\n<li>sign：参数内容签名结果，不参与签名。但需要发送给接口</li>\n</ol>\n<h3 id=\"并且提供签名的工具类供调用方使用\"><a class=\"anchor\" href=\"#并且提供签名的工具类供调用方使用\">#</a> 并且提供签名的工具类，供调用方使用：</h3>\n<pre><code class=\"language-java\">import org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Field;\nimport java.util.Iterator;\nimport java.util.TreeMap;\npublic class SignUtil &#123;\n\n    public static boolean verifySignature(String signature, TreeMap&lt;String, String&gt; map) &#123;\n        if (map == null || StringUtils.isEmpty(signature)) &#123;\n            return false;\n        &#125;\n        String data = getParamStringData(map);\n        String paramsSign = null;\n        try &#123;\n            paramsSign = DigestUtils.md5Hex(data.getBytes(&quot;utf-8&quot;));\n//            log.info(&quot;-----------------》调用前日志签名&quot;+paramsSign);\n        &#125; catch (UnsupportedEncodingException e) &#123;\n            throw new RuntimeException(e);\n        &#125;\n        return StringUtils.isNotBlank(paramsSign) &amp;&amp; paramsSign.equals(signature);\n    &#125;\n\n    public static String getParamStringData(TreeMap&lt;String, String&gt; map) &#123;\n        StringBuilder sb = new StringBuilder();\n        Iterator&lt;String&gt; iterator = map.keySet().iterator();\n        while (iterator.hasNext()) &#123;\n            String key = iterator.next();\n            String value = map.get(key);\n            sb.append(key).append(&quot;=&quot;).append(value).append(&quot;&amp;&quot;);\n        &#125;\n        if (sb.length() &gt;= 1) &#123;\n            sb = sb.deleteCharAt(sb.length() - 1);\n        &#125;\n        return sb.toString();\n    &#125;\n\n    public static String generateSign(String appkey, String appsecret, String timestamp, String nonce) &#123;\n        TreeMap&lt;String, String&gt; map = new TreeMap&lt;&gt;();\n        map.put(&quot;appkey&quot;, appkey);\n        map.put(&quot;appsecret&quot;, appsecret);\n        map.put(&quot;timestamp&quot;, timestamp);\n        map.put(&quot;nonce&quot;, nonce);\n\n        StringBuilder sb = new StringBuilder();\n        Iterator&lt;String&gt; iterator = map.keySet().iterator();\n        while (iterator.hasNext()) &#123;\n            String key = iterator.next();\n            String value = map.get(key);\n            sb.append(key).append(&quot;=&quot;).append(value).append(&quot;&amp;&quot;);\n        &#125;\n        if (sb.length() &gt;= 1) &#123;\n            sb = sb.deleteCharAt(sb.length() - 1);\n        &#125;\n\n        try &#123;\n            return DigestUtils.md5Hex(sb.toString().getBytes(&quot;utf-8&quot;));\n        &#125; catch (UnsupportedEncodingException e) &#123;\n            throw new RuntimeException(e);\n        &#125;\n    &#125;\n\n    public static String generateSign(TreeMap&lt;String, String&gt; map, String appsecret) &#123;\n        String sign = null;\n        try &#123;\n            String data = getParamStringData(map) + &quot;&amp;key=&quot; + appsecret;\n            sign = DigestUtils.md5Hex(data.getBytes(&quot;utf-8&quot;));\n        &#125; catch (UnsupportedEncodingException e) &#123;\n            throw new RuntimeException(e.getMessage(), e);\n        &#125;\n        return sign;\n    &#125;\n\n    public static String generateSign(Object obj, String appsecret) &#123;\n        Field[] fields = obj.getClass().getDeclaredFields();\n        TreeMap&lt;String, String&gt; map = new TreeMap&lt;&gt;();\n        for(Field field : fields) &#123;\n            field.setAccessible(true);\n            if(&quot;sign&quot;.equalsIgnoreCase(field.getName())) &#123;\n                continue;\n            &#125;\n            Object value = null;\n            try &#123;\n                value = field.get(obj);\n            &#125; catch (IllegalAccessException e) &#123;\n                throw new RuntimeException(e.getMessage(), e);\n            &#125;\n            if(value == null) &#123;\n                continue;\n            &#125;\n            String strValue = value.toString();\n            if(StringUtils.isBlank(strValue)) &#123;\n                continue;\n            &#125;\n            map.put(field.getName(), strValue);\n        &#125;\n\n        String sign = null;\n        try &#123;\n            String data = getParamStringData(map) + &quot;&amp;key=&quot; + appsecret;\n            sign = DigestUtils.md5Hex(data.getBytes(&quot;utf-8&quot;));\n        &#125; catch (UnsupportedEncodingException e) &#123;\n            throw new RuntimeException(e.getMessage(), e);\n        &#125;\n        return sign;\n    &#125;\n\n    public static void main(String[] args) throws UnsupportedEncodingException &#123;\n//        String data = &quot;param=123&quot;;\n//        System.out.println(DigestUtils.md5(data.getBytes(&quot;utf-8&quot;)));\n        long time = System.currentTimeMillis();\n        System.out.println(time);\n        String sign = generateSign(&quot;omsk3&quot;, &quot;w8sdmweooxsdds2332sd&quot;, &quot;&quot;+time, &quot;&quot;+time);\n        System.out.println(sign);//2d9954d5e4d2983254047b4fb2a9a9dc\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"定义全局过滤器\"><a class=\"anchor\" href=\"#定义全局过滤器\">#</a> 定义全局过滤器</h2>\n<pre><code class=\"language-java\">@Slf4j\n@Component\n//注意filter顺序，不能太高，这里有前置代码的\npublic class SignatureCheckFilter implements Filter &#123;\n   \n    @Autowired\n    private IRestApiAuthService authService;\n\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException &#123;\n    &#125;\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;\n   //TODO:这里做参数校验\n   \n   &#125;\n   \n    @Override\n    public void destroy() &#123;\n    &#125;\n    \n    &#125;\n\n</code></pre>\n<h3 id=\"全局签名校验\"><a class=\"anchor\" href=\"#全局签名校验\">#</a> 全局签名校验</h3>\n<p>在全局拦截其中，需要对所有的对外服务的接口做签名校验，签名校验方法如下：</p>\n<pre><code class=\"language-java\">public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n       \n        String appkey = request.getHeader(&quot;Appkey&quot;);\n        String timestamp = request.getHeader(&quot;Timestamp&quot;);\n        String nonce = request.getHeader(&quot;Nonce&quot;);\n        String signature = request.getHeader(&quot;Signature&quot;);\n\n        TreeMap&lt;String, String&gt; params = new TreeMap&lt;String, String&gt;();\n        if (StringUtils.isBlank(appkey)) &#123;\n            responseInvalidParam(response, &quot;appkey must not be empty&quot;);\n            return;\n        &#125;\n        RestApiAuth apiAuth = authService.getRestApiAuthByAppkey(appkey);\n        if (apiAuth == null) &#123;\n            responseInvalidParam(response, &quot;invalid param&quot;);\n            return;\n        &#125;\n        params.put(&quot;appkey&quot;, appkey);\n        params.put(&quot;appsecret&quot;, apiAuth.getAppsecret());\n        params.put(&quot;timestamp&quot;, timestamp);\n        params.put(&quot;nonce&quot;, nonce);\n        // 校验必填参数\n        if (!validateParam(response, appkey, timestamp, nonce, signature)) &#123;\n            return;\n        &#125;\n\n        boolean pass = SignUtil.verifySignature(signature, params);\n        if (pass) &#123;\n            //封装线程数据\n            RestApiVo restApiVo = new RestApiVo();\n            //app key\n            restApiVo.setAppkey(appkey);\n            //来源渠道编号：系统设置-渠道入口管理\n            restApiVo.setChannelCode(apiAuth.getChannelCode());\n            restApiVo.setChannelId(apiAuth.getChannelId());\n            restApiVo.setChannelName(com.middle.platform.core.util.StringUtils.getValueByAny(apiAuth.getChannelName(), apiAuth.getRemark(), apiAuth.getChannelCode(), apiAuth.getAppkey(), &quot;外部系统创建&quot;));\n            //请求url,带get参数\n            restApiVo.setParam(request.getQueryString());\n            //请求参数集合(post部分)\n            restApiVo.setBody((String) SessionDataUtil.get(SDenums.postBody));\n            //请求header，json\n            JSONObject hearJson = new JSONObject();\n            Map&lt;String, String&gt; map = Maps.newHashMap();\n            Enumeration headerNames = request.getHeaderNames();\n            while (headerNames.hasMoreElements()) &#123;\n                String key = (String) headerNames.nextElement();\n                hearJson.put(key, request.getHeader(key));\n                map.put(key, request.getHeader(key));\n            &#125;\n            restApiVo.setHeaders(hearJson.toJSONString());\n            //请求链路参数\n            restApiVo.setSno(MDC.get(CommonConstant.LOG_TRACE_ID));\n            //用户登录信息\n            restApiVo.setBmpIUserDd(request.getHeader(HeaderConstant.BMP_BPLOG_USER_ID));\n            if (GENERAL_CHANNEL_CODE_SET.contains(restApiVo.getChannelCode())) &#123;\n                restApiVo.setBmpIRestUserType(BpUserTypeEnum.GENERAL_MEMBER.getCode());\n            &#125;\n            if (StringUtils.isBlank(restApiVo.getBmpIRestUserType())) &#123;\n                restApiVo.setBmpIRestUserType(request.getHeader(HeaderConstant.BMP_BPLOG_USER_TYPE));\n            &#125;\n            restApiVo.setHeadersMap(map);\n            SessionGatewayCurrent.set(restApiVo);\n\n            filterChain.doFilter(request, response);\n        &#125; else &#123;\n            log.error(&quot;check signature fail&quot;);\n            writeResponse(response, null, ResponseCode.E401, &quot;signature not match.&quot;, Boolean.FALSE);\n            return;\n        &#125;\n    &#125;\n\n    @Override\n    public void destroy() &#123;\n    &#125;\n\n    private boolean validateParam(HttpServletResponse response, String appkey, String timestamp, String nonce, String signature) throws IOException &#123;\n        if (StringUtils.isBlank(nonce)) &#123;\n            responseInvalidParam(response, &quot;nonce must not be empty&quot;);\n            return false;\n        &#125;\n\n        if (nonce.length() &lt; 10) &#123;\n            responseInvalidParam(response, &quot;nonce长度不能少于10&quot;);\n            return false;\n        &#125;\n\n        if (StringUtils.isBlank(timestamp)) &#123;\n            responseInvalidParam(response, &quot;timestamp must not be empty&quot;);\n            return false;\n        &#125;\n\n        if (StringUtils.isBlank(signature)) &#123;\n            responseInvalidParam(response, &quot;signature must not be empty&quot;);\n            return false;\n        &#125;\n\n        // 判断请求时间是否在15分钟内\n        long time = Long.valueOf(timestamp);\n        DateTime date = new DateTime(time);\n//        log.info(&quot;GateWay 接口调用时间戳:&#123;&#125;&quot;, time);\n//        log.info(&quot;GateWay 接口调用时间:&#123;&#125;&quot;, date);\n//        log.info(&quot;GateWay 服务器时间:&#123;&#125;&quot;, DateTime.now());\n        // TODO pm给产品用，不校验时间戳有效性，便于测试，上线后删除这个appkey\n        if (!&quot;pm&quot;.equalsIgnoreCase(appkey)) &#123;\n            if (DateTime.now().minusMinutes(15).isAfter(date) || DateTime.now().plusMinutes(15).isBefore(date)) &#123;\n                responseInvalidParam(response, &quot;invalid timestamp&quot;);\n                return false;\n            &#125;\n\n            // 预防重放攻击\n            String key = &quot;rest_api_auth:&quot; + appkey + &quot;:&quot; + nonce;\n            if (RedisUtil.exists(key)) &#123;\n                responseInvalidParam(response, &quot;none repeated&quot;);\n                return false;\n            &#125; else &#123;\n                // 缓存30分钟\n                RedisUtil.set(key, Byte.valueOf(&quot;1&quot;), 30 * 60L);\n            &#125;\n        &#125;\n\n        return Boolean.TRUE;\n    &#125;\n</code></pre>\n",
            "tags": [
                "计算机科学",
                "Java"
            ]
        },
        {
            "id": "http://blog.huanlee.cn/computer-science/blog/hello-world/",
            "url": "http://blog.huanlee.cn/computer-science/blog/hello-world/",
            "title": "Hello World",
            "date_published": "2020-10-16T08:04:30.935Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<pre><code class=\"language-bash\">$ hexo new &quot;My New Post&quot;\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<pre><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<pre><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<pre><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "计算机科学",
                "个人博客"
            ]
        },
        {
            "id": "http://blog.huanlee.cn/computer-science/utils/Gradle%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "url": "http://blog.huanlee.cn/computer-science/utils/Gradle%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",
            "title": "Gradle使用指南",
            "date_published": "2020-10-16T07:55:40.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为自己学习 Gradle 的一些笔记记录，参考百度和官方文档，仅供参考。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ncmFkbGUub3JnLw==\">https://gradle.org/</span></p>\n</div>\n<h1 id=\"什么是gradle\"><a class=\"anchor\" href=\"#什么是gradle\">#</a> 什么是 Gradle？</h1>\n<p>一个基于 JVM 的构建工具.</p>\n<p>Gradle 提供了:</p>\n<ul>\n<li>一个像 Ant 一样的灵活的构建工具</li>\n<li>一种可切换的，像 maven 一样的基于合约构建的框架</li>\n<li>支持强大的多工程构建</li>\n<li>支持强大的依赖管理 (基于 ApacheIvy)</li>\n<li>支持已有的 maven 和 ivy 仓库</li>\n<li>支持传递性依赖管理，而不需要远程仓库或者 pom.xml 或者 ivy 配置文件</li>\n<li>优先支持 Ant 式的任务和构建</li>\n<li>基于 groovy 的构建脚本</li>\n<li>有丰富的领域模型来描述你的构建</li>\n</ul>\n<h1 id=\"下载安装\"><a class=\"anchor\" href=\"#下载安装\">#</a> 下载安装</h1>\n<p>​\t官网下载后解压到想安装的文件夹下。</p>\n<h2 id=\"设置环境变量\"><a class=\"anchor\" href=\"#设置环境变量\">#</a> 设置环境变量</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>.vim ~/.bash_profile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>.添加下面内容：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> GRADLE_HOME <span class=\"token operator\">=</span> /Users/UFreedom/gradle</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$GRADLE_HOME</span>/bin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span>.source ~/.brash_profile</pre></td></tr></table></figure><h1 id=\"idea创建gradle项目\"><a class=\"anchor\" href=\"#idea创建gradle项目\">#</a> IDEA 创建 Gradle 项目</h1>\n<p>​\t在使用 IDEA 构建 gradle 项目的时候，IDEA 会自动下载与当前 IDEA 对应版本的 Gradle，第一次使用需要我们指定下载的文件夹路径，之后便不会在下载。</p>\n<p>路径设置在:  <code>Build,Execution,Deployment-&gt;Gradle</code></p>\n<h2 id=\"gradle仓库设置\"><a class=\"anchor\" href=\"#gradle仓库设置\">#</a> Gradle 仓库设置</h2>\n<figure class=\"highlight groovy\"><figcaption data-lang=\"groovy\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>repositories <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">mavenLocal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    maven <span class=\"token punctuation\">&#123;</span> url <span class=\"token string gstring\">\"http://maven.aliyun.com/nexus/content/groups/public/\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    maven <span class=\"token punctuation\">&#123;</span> url <span class=\"token string gstring\">\"https://repo.spring.io/snapshot\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    maven <span class=\"token punctuation\">&#123;</span> url <span class=\"token string gstring\">\"https://repo.spring.io/milestone\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    maven <span class=\"token punctuation\">&#123;</span> url <span class=\"token string\">'http://oss.jfrog.org/artifactory/oss-snapshot-local/'</span> <span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 转换 pdf 使用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t存储库只是文件的集合，按分组，名称和版本来组织构造。 默认情况下，Gradle 不定义任何存储库。 这里使用 repositories 指定存储库。<br />\n​\tmavenLocal ()：指定使用 maven 本地仓库，而本地仓库在配置 maven 时 setting 文件指定的仓库位置。如 <code>&lt;localRepository&gt;D:/repository&lt;/localRepository&gt;</code> ，同时将 <code>setting</code>  文件拷贝到 <code>C:\\Users\\Administrator\\.m2</code>  目录下，一般该目录下是没有 <code>setting</code>  文件的，gradle 查找 jar 包顺序如下： <code>gradle默认会按以下顺序去查找本地的仓库：USER_HOME/.m2/settings.xml &gt;&gt; M2_HOME/conf/settings.xml &gt;&gt; USER_HOME/.m2/repository。</code> <br />\n <code>maven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot;&#125;</code> ：指定阿里云镜像加速地址<br />\n​\tmavenCentral ()：这是 Maven 的中央仓库，无需配置，直接声明就可以使用。<br />\n​\tjcenter ():JCenter 中央仓库，实际也是是用的 maven 搭建的，但相比 Maven 仓库更友好，通过 CDN 分发，并且支持 https 访问。<br />\n​\t后面的 <code>maven &#123; url 地址&#125;</code> ，指定 maven 仓库，一般用私有仓库地址或其它的第三方库。<br />\n​\tgradle 按配置顺序寻找 jar 文件。如果本地存在就不会再去下载。不存在的再去 maven 仓库下载，这里注意下载下来的 jar 文件不在 maven 仓库里，而是在 gradle 的主工作目录下，如上面的 <code>D:\\.gradle</code>  目录。</p>\n<h2 id=\"构建命令\"><a class=\"anchor\" href=\"#构建命令\">#</a> 构建命令</h2>\n<p>清理命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gradle clean</pre></td></tr></table></figure><p>构建打包命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gradle clean build</pre></td></tr></table></figure><p>编译时跳过测试，使用 <code>-x</code> , <code>-x</code>  参数用来排除不需要执行的任务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gradle clean build -x <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><h2 id=\"创建缓存依赖\"><a class=\"anchor\" href=\"#创建缓存依赖\">#</a> 创建缓存依赖</h2>\n<p>执行命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gradle clean build --refresh-dependencies</pre></td></tr></table></figure><p>或删除 <code>.gradle/caches</code>  目录，构建的时候它会下载所有依赖并加入到缓存中。</p>\n<h2 id=\"阿里云镜像\"><a class=\"anchor\" href=\"#阿里云镜像\">#</a> 阿里云镜像</h2>\n<figure class=\"highlight groovy\"><figcaption data-lang=\"groovy\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>buildscript <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    repositories <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        maven <span class=\"token punctuation\">&#123;</span> url <span class=\"token string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        maven<span class=\"token punctuation\">&#123;</span> url <span class=\"token string\">'http://maven.aliyun.com/nexus/content/repositories/jcenter'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"gradlebuild构建脚本\"><a class=\"anchor\" href=\"#gradlebuild构建脚本\">#</a> gradle.build 构建脚本</h2>\n<p>​\tbuild.gradle 是 Gradle 默认的构建脚本文件，执行 Gradle 命令的时候，会默认加载当前目录下的 build.gradle 脚本文件。<br />\ngradle.build 脚本如下：</p>\n<figure class=\"highlight groovy\"><figcaption data-lang=\"groovy\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>buildScript <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    repositories <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>repositories <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t <code>buildScript</code>  里的 <code>repositories</code>  是这个脚本需要的依赖库，与项目无关，在执行脚本时，会从这个库里 download 对应的 jar 和插件。第二个 <code>repositories</code>  是项目里需要依赖的 jar 的库。</p>\n<h3 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h3>\n<p>​\t一个项目中只放置一个 <code>build.gradle</code> ， <code>build.gradle</code>  可以理解为一个 Project 框架，提供了对一个项目的基本配置。</p>\n<p>project 的常用:</p>\n<p>属性：</p>\n<ol>\n<li>group</li>\n<li>name(artifact)</li>\n<li>version 项目版本（全局的）</li>\n<li>sourceCompatibility = 1.8           //source 使用的 jdk 版本</li>\n<li>targetCompatibility = 1.8           // 编译时使用的 jdk 版本或者更新的 java 虚拟机兼容</li>\n<li>compileJava.options.encoding = 'UTF-8'</li>\n<li>compileTestJava.options.encoding = 'UTF-8'</li>\n</ol>\n<p>方法：</p>\n<ol>\n<li>apply 应用插件</li>\n<li>dependencies 添加依赖</li>\n<li>repositories 添加仓库</li>\n<li>task 定义任务</li>\n<li>buildscript</li>\n<li>allprojects</li>\n<li>subprojects</li>\n<li>configurations</li>\n</ol>\n<h3 id=\"gradle中的repositories\"><a class=\"anchor\" href=\"#gradle中的repositories\">#</a> gradle 中的 repositories</h3>\n<figure class=\"highlight groovy\"><figcaption data-lang=\"groovy\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//repositories 是 project 一个方法，闭包作为参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>repositories <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个是用来指定使用什么库的，它可以存在 <code>buildScript</code>  块、 <code>allprojects</code>  块、根级别块。</p>\n<p><strong> <code>buildScript</code>  块</strong>的 <code>repositories</code>  主要是为了 Gradle 脚本自身的执行，获取脚本依赖插件。</p>\n<p><strong>根级别</strong>的 <code>repositories</code>  主要是为了当前项目提供所需依赖包，比如 log4j、spring-core 等依赖包可从 mavenCentral 仓库获得。</p>\n<p><strong>allprojects 块</strong>的 <code>repositories</code>  用于多项目构建，为所有项目提供共同所需依赖包。而子项目可以配置自己的 <code>repositories</code>  以获取自己独需的依赖包。</p>\n<h3 id=\"gradle中的常用属性可以写在gradleproperties中\"><a class=\"anchor\" href=\"#gradle中的常用属性可以写在gradleproperties中\">#</a> gradle 中的常用属性可以写在 gradle.properties 中</h3>\n<p>一个 gradle 文件中的属性有很多，比如 jdk 版本，编码类型，dependency 版本。如果都放在 build.gradle 中势必不好管理哦（经验哦），那么 gradle 默认提供了一个 <strong>gradle.properties</strong> 文件。用这个文件来管理所有的属性在合适不过了。</p>\n<h2 id=\"查看项目已定义的所有task以及含义\"><a class=\"anchor\" href=\"#查看项目已定义的所有task以及含义\">#</a> 查看项目已定义的所有 task 以及含义</h2>\n<p>​\t命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gradle tasks</pre></td></tr></table></figure><p>比如结果如下</p>\n<ul>\n<li>assemble: 编译</li>\n<li>build：编译并执行测试</li>\n<li>clean：删除 build 目录</li>\n<li>jar： 生成 jar 包</li>\n<li>test：执行单元测试</li>\n</ul>\n<h2 id=\"settingsgradle配置\"><a class=\"anchor\" href=\"#settingsgradle配置\">#</a> settings.gradle 配置</h2>\n<p>​\t模块 Module 的配置文件，大多数 setting.gradle 的作用是为了配置子工程，根目录下的 settings.gradle 脚本文件是针对 module 的全局配置，它的作用域所包含的所有 module 是通过 settings.gradle 来配置。<br />\nsettings.gradle 用于创建多 Project 的 Gradle 项目。Project 在 IDEA 里对应 Module 模块。<br />\n例如配置 module 名 <code>rootProject.name = 'DyoonPLM'</code></p>\n",
            "tags": [
                "计算机科学",
                "工具"
            ]
        },
        {
            "id": "http://blog.huanlee.cn/computer-science/java/ParallelStream%E5%B9%B6%E8%A1%8C%E6%B5%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/",
            "url": "http://blog.huanlee.cn/computer-science/java/ParallelStream%E5%B9%B6%E8%A1%8C%E6%B5%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/",
            "title": "ParallelStream并行流使用注意事项",
            "date_published": "2020-09-22T09:35:40.000Z",
            "content_html": "<div class=\"note info\">\n<p>在使用 Java8 并发流时，自己对比在传统线程使用中的一些疑惑，通过百度和自己实践得出的问题记录</p>\n</div>\n<h1 id=\"parallelstream简介\"><a class=\"anchor\" href=\"#parallelstream简介\">#</a> ParallelStream 简介</h1>\n<p>parallelStream 提供了流的并行处理，它是 Stream 的另一重要特性，其底层使用 Fork/Join 框架实现。简单理解就是多线程异步任务的一种实现。</p>\n<p>例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>输出：<span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">2</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">9</span> <span class=\"token number\">8</span> <span class=\"token number\">1</span> <span class=\"token number\">5</span></pre></td></tr></table></figure><p>因为并行流顾名思义它是多线程并行处理的，所以在运行时并不会按照我们原有的顺序输出。</p>\n<h1 id=\"parallelstream的陷阱\"><a class=\"anchor\" href=\"#parallelstream的陷阱\">#</a> ParallelStream 的陷阱</h1>\n<p>由于并行流使用多线程，则一切线程安全问题都应该是需要考虑的问题，如：资源竞争、死锁、事务、可见性等等。</p>\n<p>例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">concurrentFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> listOfIntegers <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            listOfIntegers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> parallelStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        listOfIntegers</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-></span>parallelStorage<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        parallelStorage</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">forEachOrdered</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>程序运行结果如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">66</span> <span class=\"token number\">62</span> <span class=\"token number\">64</span> <span class=\"token number\">72</span> <span class=\"token number\">74</span> <span class=\"token number\">68</span> <span class=\"token number\">70</span> <span class=\"token number\">16</span> <span class=\"token number\">12</span> <span class=\"token number\">14</span> <span class=\"token number\">22</span> <span class=\"token number\">24</span> <span class=\"token number\">18</span> <span class=\"token number\">20</span> <span class=\"token number\">90</span> <span class=\"token number\">92</span> <span class=\"token number\">88</span> <span class=\"token number\">82</span> <span class=\"token number\">96</span> <span class=\"token number\">84</span> <span class=\"token number\">86</span> <span class=\"token number\">98</span> <span class=\"token keyword\">null</span> <span class=\"token keyword\">null</span> <span class=\"token number\">6</span> <span class=\"token number\">80</span> <span class=\"token number\">8</span> <span class=\"token number\">76</span> <span class=\"token number\">10</span> <span class=\"token number\">60</span> <span class=\"token number\">4</span> <span class=\"token number\">54</span> <span class=\"token number\">0</span> <span class=\"token keyword\">null</span> <span class=\"token number\">50</span> <span class=\"token number\">52</span> <span class=\"token number\">56</span> <span class=\"token number\">58</span> <span class=\"token number\">28</span> <span class=\"token number\">30</span> <span class=\"token number\">26</span> <span class=\"token number\">34</span> <span class=\"token number\">36</span> <span class=\"token number\">40</span> <span class=\"token number\">32</span> <span class=\"token number\">42</span> <span class=\"token number\">38</span> <span class=\"token number\">44</span> <span class=\"token number\">48</span> <span class=\"token number\">46</span></pre></td></tr></table></figure><h2 id=\"为什么parallelstorage会有null元素\"><a class=\"anchor\" href=\"#为什么parallelstorage会有null元素\">#</a> 为什么 parallelStorage 会有 null 元素？</h2>\n<p>首先，结合我们之前说的，并行流是使用多线程，那么在使用中我们需要考虑线程安全的问题，这里使用的 <code>ArrayList</code>  我们知道是一个非线程安全的集合，所以我们分析出现这个情况的原因：<br />\n查看 <code>ArrayList</code>  源码我们得知，它内部使用一个 <code>Object[] elementData;</code>  来储存我们的数据， <code>int size</code>  来记录集合长度，当我们进行 <code>add()</code>  操作时，通过代码 <code>elementData[size++] = e;</code>  来新增数据到内部数组中，那么我们可以认为向这个 ArrayList 中存储数据的过程可以分解为这么几步：</p>\n<ol>\n<li>读取数组的长度存入 size</li>\n<li>向这个数组中储入元素 elementData [size]=e</li>\n<li>将 size+1</li>\n<li>保存 size</li>\n</ol>\n<p>而对于 parrallelStorage 元素会有 <code>null</code>  的原因就是多线程有可能同时读取到相同的下标 size 同时赋值，这样就会出现元素缺失的问题了。</p>\n<h2 id=\"如何解决\"><a class=\"anchor\" href=\"#如何解决\">#</a> 如何解决？</h2>\n<p>既然知道了问题的源头是线程安全性导致的，那么我们只需要保证并发流中的代码一定是线程安全就能可以了，那么针对问题中的需求，我们只需要保证 <code>ArrayList</code>  是线程安全的就能解决问题。<br />\n例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> listOfIntegers <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      listOfIntegers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//List&lt;Integer> parallelStorage = new ArrayList&lt;>() ;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使用线程安全的 List 集合</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> parallelStorage <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    listOfIntegers</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> parallelStorage<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    parallelStorage</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">forEachOrdered</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">90</span> <span class=\"token number\">32</span> <span class=\"token number\">92</span> <span class=\"token number\">72</span> <span class=\"token number\">66</span> <span class=\"token number\">88</span> <span class=\"token number\">34</span> <span class=\"token number\">36</span> <span class=\"token number\">28</span> <span class=\"token number\">30</span> <span class=\"token number\">96</span> <span class=\"token number\">26</span> <span class=\"token number\">98</span> <span class=\"token number\">94</span> <span class=\"token number\">44</span> <span class=\"token number\">74</span> <span class=\"token number\">16</span> <span class=\"token number\">48</span> <span class=\"token number\">68</span> <span class=\"token number\">82</span> <span class=\"token number\">70</span> <span class=\"token number\">46</span> <span class=\"token number\">12</span> <span class=\"token number\">84</span> <span class=\"token number\">14</span> <span class=\"token number\">86</span> <span class=\"token number\">40</span> <span class=\"token number\">42</span> <span class=\"token number\">38</span> <span class=\"token number\">62</span> <span class=\"token number\">78</span> <span class=\"token number\">64</span> <span class=\"token number\">80</span> <span class=\"token number\">22</span> <span class=\"token number\">18</span> <span class=\"token number\">76</span> <span class=\"token number\">20</span> <span class=\"token number\">6</span> <span class=\"token number\">8</span> <span class=\"token number\">24</span> <span class=\"token number\">10</span> <span class=\"token number\">4</span> <span class=\"token number\">0</span> <span class=\"token number\">2</span> <span class=\"token number\">56</span> <span class=\"token number\">58</span> <span class=\"token number\">60</span> <span class=\"token number\">50</span> <span class=\"token number\">52</span> <span class=\"token number\">54</span></pre></td></tr></table></figure><p>果然输出结果中确实没有 <code>null</code>  了。</p>\n",
            "tags": [
                "计算机科学",
                "Java"
            ]
        },
        {
            "id": "http://blog.huanlee.cn/computer-science/blog/%E9%80%9A%E8%BF%87Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "http://blog.huanlee.cn/computer-science/blog/%E9%80%9A%E8%BF%87Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "通过Hexo搭建个人博客",
            "date_published": "2020-09-21T08:40:40.000Z",
            "content_html": "<div class=\"note info\">\n<p>以下为自己通过 hexo 搭建个人博客的笔记，记录自己的采坑历程，参考 hexo 官方文档和百度资料。<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">https://hexo.io/</span></p>\n</div>\n<h1 id=\"什么是hexo\"><a class=\"anchor\" href=\"#什么是hexo\">#</a> 什么是 hexo？</h1>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<h2 id=\"安装前准备\"><a class=\"anchor\" href=\"#安装前准备\">#</a> 安装前准备</h2>\n<p>安装 Hexo 需要保证当前环境有以下应用程序：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">Git</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js</span> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>\n</ul>\n<h3 id=\"安装git\"><a class=\"anchor\" href=\"#安装git\">#</a> 安装 Git</h3>\n<p>因为我是用的是个人的 Centos 服务器，直接通过 yum 命令安装：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">#安装 git</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>yum <span class=\"token function\">install</span> -y <span class=\"token function\">git</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">#查看版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> version</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token function\">git</span> version <span class=\"token number\">1.8</span>.3.1</pre></td></tr></table></figure><h3 id=\"安装nodejs\"><a class=\"anchor\" href=\"#安装nodejs\">#</a> 安装 Node.js</h3>\n<ol>\n<li>从官网下下载最新的 nodejs，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">https://nodejs.org/en/download/</span></li>\n<li>上传安装包到服务器，并解压。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">tar</span> -xvf node-v12.18.4-linux-x64.tar.xz</pre></td></tr></table></figure><ol start=\"3\">\n<li>移动文件夹并且改名</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">mv</span> /home/node-v12.18.4-linux-x64 <span class=\"token builtin class-name\">.</span> //后面的.表示移动到当前目录</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">mv</span> node-v12.18.4-linux-x64/ nodejs</pre></td></tr></table></figure><ol start=\"4\">\n<li>让 npm 和 node 命令全局生效</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">ln</span> -s /usr/local/nodejs/bin/npm /usr/local/bin/</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">ln</span> -s /usr/local/nodejs/bin/node /usr/local/bin/</pre></td></tr></table></figure><ol start=\"5\">\n<li>查看 Node.js 是否安装成功</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>node -v</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>v12.18.4</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">npm</span> -v</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">6.14</span>.6</pre></td></tr></table></figure><h2 id=\"安装hexo\"><a class=\"anchor\" href=\"#安装hexo\">#</a> 安装 Hexo</h2>\n<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</pre></td></tr></table></figure><h3 id=\"遇到问题\"><a class=\"anchor\" href=\"#遇到问题\">#</a> 遇到问题</h3>\n<p>这里安装完成后，执行会提示如下错误，通过添加环境变量或者添加链接解决</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>hexo init </pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>-bash: hexo: 未找到命令</pre></td></tr></table></figure><p>添加链接解决方式：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">ln</span> -s /node_modules/.bin/hexo /usr/local/bin/</pre></td></tr></table></figure><h1 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h1>\n<p>Hexo 安装完成后通过初始化命令构建一个 hexo 项目。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>hexo init</pre></td></tr></table></figure><p>初始化完成后，通过预览命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>发布一个本地博客服务，在网页访问 ip + 默认端口 <code>ip:4000</code>  就能看到效果了。</p>\n<h1 id=\"创建新文章\"><a class=\"anchor\" href=\"#创建新文章\">#</a> 创建新文章</h1>\n<p>博客仅仅是能看到还没有用，我们需要发布自己的内容上去，那么通过命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># [layout] 为布局，可选项为 `post`、`page`、`draft`，这将决定文章所在文件路径。</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># &lt;title> 为文章标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 如 hexo new post 新的博客</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>hexo new <span class=\"token punctuation\">[</span>layout<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span></pre></td></tr></table></figure><p>执行命令后，会在布局路径下生成 <code>[文章标题].md</code>  的文件，填充文件内容就可以了。</p>\n<h1 id=\"部署\"><a class=\"anchor\" href=\"#部署\">#</a> 部署</h1>\n<p>新写了一篇博客后，需要发布到网络上分享给自己的朋友，虽然通过前面的本地预览命令 <code>hexo s</code>  也能达到效果，但是我这里使用 <code>nginx</code>  发布：<br />\n首先我们需要把刚写的博客编译成网页，通过命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>hexo g</pre></td></tr></table></figure><p>编译完成后，所有的网页文件都在根目录下的 <code>public</code>  文件夹中，那么我们只需要将 <code>nginx</code>  配置中静态文件地址的路径指向 <code>&lt;root&gt;/public/</code>  就可以了。<br />\n然后直接访问 <code>nginx</code>  地址就能看到我们新发布的博客了。</p>\n<h1 id=\"更换主题\"><a class=\"anchor\" href=\"#更换主题\">#</a> 更换主题</h1>\n<p>有了自己的博客肯定想要他变得和别人的不一样，我们可以通过更换主题的方式来装修自己的博客，让它变得与众不同。<br />\n我们可以在 <code>Hexo</code>  的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">主题列表</span>中选择一个自己喜欢的主题。<br />\n以博主使用的主题： <code>Shake</code>  为例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># cd your-blog</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>在博客根目录下执行上面的代码拉取主题到本地 <code>themes</code>  文件夹中，主题文件的保存地址应该为 <code>&lt;root&gt;/themes/shoka</code> ，然后修改根目录下 <code>_config.yml</code> 。</p>\n<pre><code class=\"language-YMAL\">theme: shoka\n</code></pre>\n<p>表示使用本地主题 <code>shoka</code> , 然后执行上文中的编译部署看看新主题的效果吧。</p>\n<h1 id=\"更多\"><a class=\"anchor\" href=\"#更多\">#</a> 更多</h1>\n<p>当然， <code>Hexo</code>  的功能不仅仅于此，还有很多的功能需要我们去探索。</p>\n",
            "tags": [
                "计算机科学",
                "个人博客"
            ]
        }
    ]
}