<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Lee</title>
        <subtitle>生活笔记</subtitle>
        <icon>http://blog.huanlee.cn/images/favicon.ico</icon>
        <link>http://blog.huanlee.cn</link>
        <author>
          <name>Lee</name>
        </author>
        <description>见习码农</description>
        <language>zh-CN</language>
        <pubDate>Sat, 05 Dec 2020 17:24:40 +0800</pubDate>
        <lastBuildDate>Sat, 05 Dec 2020 17:24:40 +0800</lastBuildDate>
        <category term="JAVA" />
        <category term="Lee" />
        <category term="Java" />
        <category term="Spring Boot" />
        <category term="Spring" />
        <item>
            <guid isPermalink="true">http://blog.huanlee.cn/computer-science/java/SpringBoot%E7%BD%91%E5%85%B3%E5%AF%B9%E5%A4%96%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D/</guid>
            <title>SpringBoot网关对外接口签名</title>
            <link>http://blog.huanlee.cn/computer-science/java/SpringBoot%E7%BD%91%E5%85%B3%E5%AF%B9%E5%A4%96%E6%8E%A5%E5%8F%A3%E7%AD%BE%E5%90%8D/</link>
            <category term="计算机科学" scheme="http://blog.huanlee.cn/categories/computer-science/" />
            <category term="Java" scheme="http://blog.huanlee.cn/categories/computer-science/java/" />
            <pubDate>Sat, 05 Dec 2020 17:24:40 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;在需要提供对外接口时，通过一系列验证方式保证安全性&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;接口签名的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口签名的作用&#34;&gt;#&lt;/a&gt; 接口签名的作用&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;当我们产品在遇到需要提供对外接口的情况，我们想要保证接口的安全性，既能够保证数据的安全，又能防止被人暴力破坏，我们可以选择在对外接口上增加验证方式，来保证对外接口的安全性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;接口签名的思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口签名的思路&#34;&gt;#&lt;/a&gt; 接口签名的思路&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;传统对内接口，我们的验证方式为：对用户身份信息进行验证，（即：cookie中包含服务端sessionID或Token令牌），那么对于公开的对外接口，我们也可以用大致相同的思路，首先接口调用方，需要获取我们平台颁发给他的`appKey`和`appSecret`（可以理解为：用户名和密码），然后为了防止直接使用密钥传输会被抓包窃取数据，那么我们需要规定一种双方都能通过密钥得出的对称加密方式，这样只需要每次在接口上传递加密后的密码串，就能保证安全性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;接口签名的代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口签名的代码实现&#34;&gt;#&lt;/a&gt; 接口签名的代码实现&lt;/h1&gt;
&lt;h2 id=&#34;首先我们需要一个存储用户信息的表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#首先我们需要一个存储用户信息的表&#34;&gt;#&lt;/a&gt; 首先我们需要一个存储用户信息的表&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class RestApiAuth implements Serializable &amp;#123;

    private static final long serialVersionUID = 1L;

    /**
     * app key
     */
    private String appkey;

    /**
     * app secret
     */
    private String appsecret;

    private Date createTime;

    private Date updateTime;
    /**
     * 是否启用(1:是 0:否)
     */
    private Integer enabled;
    /**
     * 备注
     */
    private String remark;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对外接口用户信息增删查改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对外接口用户信息增删查改&#34;&gt;#&lt;/a&gt; 对外接口用户信息增删查改&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface IRestApiAuthService extends IService&amp;lt;RestApiAuth&amp;gt; &amp;#123;

    public RestApiAuth getRestApiAuthByAppkey(String appkey);
&amp;#125;

@Service
public class RestApiAuthServiceImpl extends ServiceImpl&amp;lt;RestApiAuthMapper, RestApiAuth&amp;gt; implements IRestApiAuthService &amp;#123;

    @Override
    public RestApiAuth getRestApiAuthByAppkey(String appkey) &amp;#123;
        QueryWrapper&amp;lt;RestApiAuth&amp;gt; wrapper = new QueryWrapper&amp;lt;RestApiAuth&amp;gt;()
                .eq(&amp;quot;appkey&amp;quot;, appkey);
        return super.getOne(wrapper);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;加密签名规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加密签名规则&#34;&gt;#&lt;/a&gt; 加密签名规则&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;那么我们需要规定，在所有对外接口中，需要在http请求的头部信息中包含签名验证参数。我们定义4个必传参数为：
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;appkey：颁发给用户的 appKey&lt;/li&gt;
&lt;li&gt;noncestr：随机字符串&lt;/li&gt;
&lt;li&gt;timestamp：发起请求时间秒数&lt;/li&gt;
&lt;li&gt;sign：参数内容签名结果，不参与签名。但需要发送给接口&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;并且提供签名的工具类供调用方使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并且提供签名的工具类供调用方使用&#34;&gt;#&lt;/a&gt; 并且提供签名的工具类，供调用方使用：&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.util.Iterator;
import java.util.TreeMap;
public class SignUtil &amp;#123;

    public static boolean verifySignature(String signature, TreeMap&amp;lt;String, String&amp;gt; map) &amp;#123;
        if (map == null || StringUtils.isEmpty(signature)) &amp;#123;
            return false;
        &amp;#125;
        String data = getParamStringData(map);
        String paramsSign = null;
        try &amp;#123;
            paramsSign = DigestUtils.md5Hex(data.getBytes(&amp;quot;utf-8&amp;quot;));
//            log.info(&amp;quot;-----------------》调用前日志签名&amp;quot;+paramsSign);
        &amp;#125; catch (UnsupportedEncodingException e) &amp;#123;
            throw new RuntimeException(e);
        &amp;#125;
        return StringUtils.isNotBlank(paramsSign) &amp;amp;&amp;amp; paramsSign.equals(signature);
    &amp;#125;

    public static String getParamStringData(TreeMap&amp;lt;String, String&amp;gt; map) &amp;#123;
        StringBuilder sb = new StringBuilder();
        Iterator&amp;lt;String&amp;gt; iterator = map.keySet().iterator();
        while (iterator.hasNext()) &amp;#123;
            String key = iterator.next();
            String value = map.get(key);
            sb.append(key).append(&amp;quot;=&amp;quot;).append(value).append(&amp;quot;&amp;amp;&amp;quot;);
        &amp;#125;
        if (sb.length() &amp;gt;= 1) &amp;#123;
            sb = sb.deleteCharAt(sb.length() - 1);
        &amp;#125;
        return sb.toString();
    &amp;#125;

    public static String generateSign(String appkey, String appsecret, String timestamp, String nonce) &amp;#123;
        TreeMap&amp;lt;String, String&amp;gt; map = new TreeMap&amp;lt;&amp;gt;();
        map.put(&amp;quot;appkey&amp;quot;, appkey);
        map.put(&amp;quot;appsecret&amp;quot;, appsecret);
        map.put(&amp;quot;timestamp&amp;quot;, timestamp);
        map.put(&amp;quot;nonce&amp;quot;, nonce);

        StringBuilder sb = new StringBuilder();
        Iterator&amp;lt;String&amp;gt; iterator = map.keySet().iterator();
        while (iterator.hasNext()) &amp;#123;
            String key = iterator.next();
            String value = map.get(key);
            sb.append(key).append(&amp;quot;=&amp;quot;).append(value).append(&amp;quot;&amp;amp;&amp;quot;);
        &amp;#125;
        if (sb.length() &amp;gt;= 1) &amp;#123;
            sb = sb.deleteCharAt(sb.length() - 1);
        &amp;#125;

        try &amp;#123;
            return DigestUtils.md5Hex(sb.toString().getBytes(&amp;quot;utf-8&amp;quot;));
        &amp;#125; catch (UnsupportedEncodingException e) &amp;#123;
            throw new RuntimeException(e);
        &amp;#125;
    &amp;#125;

    public static String generateSign(TreeMap&amp;lt;String, String&amp;gt; map, String appsecret) &amp;#123;
        String sign = null;
        try &amp;#123;
            String data = getParamStringData(map) + &amp;quot;&amp;amp;key=&amp;quot; + appsecret;
            sign = DigestUtils.md5Hex(data.getBytes(&amp;quot;utf-8&amp;quot;));
        &amp;#125; catch (UnsupportedEncodingException e) &amp;#123;
            throw new RuntimeException(e.getMessage(), e);
        &amp;#125;
        return sign;
    &amp;#125;

    public static String generateSign(Object obj, String appsecret) &amp;#123;
        Field[] fields = obj.getClass().getDeclaredFields();
        TreeMap&amp;lt;String, String&amp;gt; map = new TreeMap&amp;lt;&amp;gt;();
        for(Field field : fields) &amp;#123;
            field.setAccessible(true);
            if(&amp;quot;sign&amp;quot;.equalsIgnoreCase(field.getName())) &amp;#123;
                continue;
            &amp;#125;
            Object value = null;
            try &amp;#123;
                value = field.get(obj);
            &amp;#125; catch (IllegalAccessException e) &amp;#123;
                throw new RuntimeException(e.getMessage(), e);
            &amp;#125;
            if(value == null) &amp;#123;
                continue;
            &amp;#125;
            String strValue = value.toString();
            if(StringUtils.isBlank(strValue)) &amp;#123;
                continue;
            &amp;#125;
            map.put(field.getName(), strValue);
        &amp;#125;

        String sign = null;
        try &amp;#123;
            String data = getParamStringData(map) + &amp;quot;&amp;amp;key=&amp;quot; + appsecret;
            sign = DigestUtils.md5Hex(data.getBytes(&amp;quot;utf-8&amp;quot;));
        &amp;#125; catch (UnsupportedEncodingException e) &amp;#123;
            throw new RuntimeException(e.getMessage(), e);
        &amp;#125;
        return sign;
    &amp;#125;

    public static void main(String[] args) throws UnsupportedEncodingException &amp;#123;
//        String data = &amp;quot;param=123&amp;quot;;
//        System.out.println(DigestUtils.md5(data.getBytes(&amp;quot;utf-8&amp;quot;)));
        long time = System.currentTimeMillis();
        System.out.println(time);
        String sign = generateSign(&amp;quot;omsk3&amp;quot;, &amp;quot;w8sdmweooxsdds2332sd&amp;quot;, &amp;quot;&amp;quot;+time, &amp;quot;&amp;quot;+time);
        System.out.println(sign);//2d9954d5e4d2983254047b4fb2a9a9dc
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;定义全局过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定义全局过滤器&#34;&gt;#&lt;/a&gt; 定义全局过滤器&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Slf4j
@Component
//注意filter顺序，不能太高，这里有前置代码的
public class SignatureCheckFilter implements Filter &amp;#123;
   
    @Autowired
    private IRestApiAuthService authService;


    @Override
    public void init(FilterConfig filterConfig) throws ServletException &amp;#123;
    &amp;#125;

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &amp;#123;
   //TODO:这里做参数校验
   
   &amp;#125;
   
    @Override
    public void destroy() &amp;#123;
    &amp;#125;
    
    &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;全局签名校验&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#全局签名校验&#34;&gt;#&lt;/a&gt; 全局签名校验&lt;/h3&gt;
&lt;p&gt;在全局拦截其中，需要对所有的对外服务的接口做签名校验，签名校验方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &amp;#123;
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        HttpServletRequest request = (HttpServletRequest) servletRequest;
       
        String appkey = request.getHeader(&amp;quot;Appkey&amp;quot;);
        String timestamp = request.getHeader(&amp;quot;Timestamp&amp;quot;);
        String nonce = request.getHeader(&amp;quot;Nonce&amp;quot;);
        String signature = request.getHeader(&amp;quot;Signature&amp;quot;);

        TreeMap&amp;lt;String, String&amp;gt; params = new TreeMap&amp;lt;String, String&amp;gt;();
        if (StringUtils.isBlank(appkey)) &amp;#123;
            responseInvalidParam(response, &amp;quot;appkey must not be empty&amp;quot;);
            return;
        &amp;#125;
        RestApiAuth apiAuth = authService.getRestApiAuthByAppkey(appkey);
        if (apiAuth == null) &amp;#123;
            responseInvalidParam(response, &amp;quot;invalid param&amp;quot;);
            return;
        &amp;#125;
        params.put(&amp;quot;appkey&amp;quot;, appkey);
        params.put(&amp;quot;appsecret&amp;quot;, apiAuth.getAppsecret());
        params.put(&amp;quot;timestamp&amp;quot;, timestamp);
        params.put(&amp;quot;nonce&amp;quot;, nonce);
        // 校验必填参数
        if (!validateParam(response, appkey, timestamp, nonce, signature)) &amp;#123;
            return;
        &amp;#125;

        boolean pass = SignUtil.verifySignature(signature, params);
        if (pass) &amp;#123;
            //封装线程数据
            RestApiVo restApiVo = new RestApiVo();
            //app key
            restApiVo.setAppkey(appkey);
            //来源渠道编号：系统设置-渠道入口管理
            restApiVo.setChannelCode(apiAuth.getChannelCode());
            restApiVo.setChannelId(apiAuth.getChannelId());
            restApiVo.setChannelName(com.middle.platform.core.util.StringUtils.getValueByAny(apiAuth.getChannelName(), apiAuth.getRemark(), apiAuth.getChannelCode(), apiAuth.getAppkey(), &amp;quot;外部系统创建&amp;quot;));
            //请求url,带get参数
            restApiVo.setParam(request.getQueryString());
            //请求参数集合(post部分)
            restApiVo.setBody((String) SessionDataUtil.get(SDenums.postBody));
            //请求header，json
            JSONObject hearJson = new JSONObject();
            Map&amp;lt;String, String&amp;gt; map = Maps.newHashMap();
            Enumeration headerNames = request.getHeaderNames();
            while (headerNames.hasMoreElements()) &amp;#123;
                String key = (String) headerNames.nextElement();
                hearJson.put(key, request.getHeader(key));
                map.put(key, request.getHeader(key));
            &amp;#125;
            restApiVo.setHeaders(hearJson.toJSONString());
            //请求链路参数
            restApiVo.setSno(MDC.get(CommonConstant.LOG_TRACE_ID));
            //用户登录信息
            restApiVo.setBmpIUserDd(request.getHeader(HeaderConstant.BMP_BPLOG_USER_ID));
            if (GENERAL_CHANNEL_CODE_SET.contains(restApiVo.getChannelCode())) &amp;#123;
                restApiVo.setBmpIRestUserType(BpUserTypeEnum.GENERAL_MEMBER.getCode());
            &amp;#125;
            if (StringUtils.isBlank(restApiVo.getBmpIRestUserType())) &amp;#123;
                restApiVo.setBmpIRestUserType(request.getHeader(HeaderConstant.BMP_BPLOG_USER_TYPE));
            &amp;#125;
            restApiVo.setHeadersMap(map);
            SessionGatewayCurrent.set(restApiVo);

            filterChain.doFilter(request, response);
        &amp;#125; else &amp;#123;
            log.error(&amp;quot;check signature fail&amp;quot;);
            writeResponse(response, null, ResponseCode.E401, &amp;quot;signature not match.&amp;quot;, Boolean.FALSE);
            return;
        &amp;#125;
    &amp;#125;

    @Override
    public void destroy() &amp;#123;
    &amp;#125;

    private boolean validateParam(HttpServletResponse response, String appkey, String timestamp, String nonce, String signature) throws IOException &amp;#123;
        if (StringUtils.isBlank(nonce)) &amp;#123;
            responseInvalidParam(response, &amp;quot;nonce must not be empty&amp;quot;);
            return false;
        &amp;#125;

        if (nonce.length() &amp;lt; 10) &amp;#123;
            responseInvalidParam(response, &amp;quot;nonce长度不能少于10&amp;quot;);
            return false;
        &amp;#125;

        if (StringUtils.isBlank(timestamp)) &amp;#123;
            responseInvalidParam(response, &amp;quot;timestamp must not be empty&amp;quot;);
            return false;
        &amp;#125;

        if (StringUtils.isBlank(signature)) &amp;#123;
            responseInvalidParam(response, &amp;quot;signature must not be empty&amp;quot;);
            return false;
        &amp;#125;

        // 判断请求时间是否在15分钟内
        long time = Long.valueOf(timestamp);
        DateTime date = new DateTime(time);
//        log.info(&amp;quot;GateWay 接口调用时间戳:&amp;#123;&amp;#125;&amp;quot;, time);
//        log.info(&amp;quot;GateWay 接口调用时间:&amp;#123;&amp;#125;&amp;quot;, date);
//        log.info(&amp;quot;GateWay 服务器时间:&amp;#123;&amp;#125;&amp;quot;, DateTime.now());
        // TODO pm给产品用，不校验时间戳有效性，便于测试，上线后删除这个appkey
        if (!&amp;quot;pm&amp;quot;.equalsIgnoreCase(appkey)) &amp;#123;
            if (DateTime.now().minusMinutes(15).isAfter(date) || DateTime.now().plusMinutes(15).isBefore(date)) &amp;#123;
                responseInvalidParam(response, &amp;quot;invalid timestamp&amp;quot;);
                return false;
            &amp;#125;

            // 预防重放攻击
            String key = &amp;quot;rest_api_auth:&amp;quot; + appkey + &amp;quot;:&amp;quot; + nonce;
            if (RedisUtil.exists(key)) &amp;#123;
                responseInvalidParam(response, &amp;quot;none repeated&amp;quot;);
                return false;
            &amp;#125; else &amp;#123;
                // 缓存30分钟
                RedisUtil.set(key, Byte.valueOf(&amp;quot;1&amp;quot;), 30 * 60L);
            &amp;#125;
        &amp;#125;

        return Boolean.TRUE;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.huanlee.cn/computer-science/blog/hello-world/</guid>
            <title>Hello World</title>
            <link>http://blog.huanlee.cn/computer-science/blog/hello-world/</link>
            <category term="计算机科学" scheme="http://blog.huanlee.cn/categories/computer-science/" />
            <category term="个人博客" scheme="http://blog.huanlee.cn/categories/computer-science/boke/" />
            <pubDate>Fri, 16 Oct 2020 16:04:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo new &amp;quot;My New Post&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hexo deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.huanlee.cn/computer-science/utils/Gradle%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
            <title>Gradle使用指南</title>
            <link>http://blog.huanlee.cn/computer-science/utils/Gradle%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
            <category term="计算机科学" scheme="http://blog.huanlee.cn/categories/computer-science/" />
            <category term="工具" scheme="http://blog.huanlee.cn/categories/computer-science/utils/" />
            <pubDate>Fri, 16 Oct 2020 15:55:40 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;以下为自己学习 Gradle 的一些笔记记录，参考百度和官方文档，仅供参考。&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ncmFkbGUub3JnLw==&#34;&gt;https://gradle.org/&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;什么是gradle&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是gradle&#34;&gt;#&lt;/a&gt; 什么是 Gradle？&lt;/h1&gt;
&lt;p&gt;一个基于 JVM 的构建工具.&lt;/p&gt;
&lt;p&gt;Gradle 提供了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个像 Ant 一样的灵活的构建工具&lt;/li&gt;
&lt;li&gt;一种可切换的，像 maven 一样的基于合约构建的框架&lt;/li&gt;
&lt;li&gt;支持强大的多工程构建&lt;/li&gt;
&lt;li&gt;支持强大的依赖管理 (基于 ApacheIvy)&lt;/li&gt;
&lt;li&gt;支持已有的 maven 和 ivy 仓库&lt;/li&gt;
&lt;li&gt;支持传递性依赖管理，而不需要远程仓库或者 pom.xml 或者 ivy 配置文件&lt;/li&gt;
&lt;li&gt;优先支持 Ant 式的任务和构建&lt;/li&gt;
&lt;li&gt;基于 groovy 的构建脚本&lt;/li&gt;
&lt;li&gt;有丰富的领域模型来描述你的构建&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;下载安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载安装&#34;&gt;#&lt;/a&gt; 下载安装&lt;/h1&gt;
&lt;p&gt;​	官网下载后解压到想安装的文件夹下。&lt;/p&gt;
&lt;h2 id=&#34;设置环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设置环境变量&#34;&gt;#&lt;/a&gt; 设置环境变量&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;.vim ~/.bash_profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;.添加下面内容：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; GRADLE_HOME &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; /Users/UFreedom/gradle&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;token assign-left variable&#34;&gt;&lt;span class=&#34;token environment constant&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token environment constant&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$GRADLE_HOME&lt;/span&gt;/bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;.source ~/.brash_profile&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;idea创建gradle项目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#idea创建gradle项目&#34;&gt;#&lt;/a&gt; IDEA 创建 Gradle 项目&lt;/h1&gt;
&lt;p&gt;​	在使用 IDEA 构建 gradle 项目的时候，IDEA 会自动下载与当前 IDEA 对应版本的 Gradle，第一次使用需要我们指定下载的文件夹路径，之后便不会在下载。&lt;/p&gt;
&lt;p&gt;路径设置在:  &lt;code&gt;Build,Execution,Deployment-&amp;gt;Gradle&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;gradle仓库设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gradle仓库设置&#34;&gt;#&lt;/a&gt; Gradle 仓库设置&lt;/h2&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;figcaption data-lang=&#34;groovy&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repositories &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;mavenLocal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    maven &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; url &lt;span class=&#34;token string gstring&#34;&gt;&#34;http://maven.aliyun.com/nexus/content/groups/public/&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;mavenCentral&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;jcenter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    maven &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; url &lt;span class=&#34;token string gstring&#34;&gt;&#34;https://repo.spring.io/snapshot&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    maven &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; url &lt;span class=&#34;token string gstring&#34;&gt;&#34;https://repo.spring.io/milestone&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    maven &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; url &lt;span class=&#34;token string&#34;&gt;&#39;http://oss.jfrog.org/artifactory/oss-snapshot-local/&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 转换 pdf 使用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	存储库只是文件的集合，按分组，名称和版本来组织构造。 默认情况下，Gradle 不定义任何存储库。 这里使用 repositories 指定存储库。&lt;br /&gt;
​	mavenLocal ()：指定使用 maven 本地仓库，而本地仓库在配置 maven 时 setting 文件指定的仓库位置。如 &lt;code&gt;&amp;lt;localRepository&amp;gt;D:/repository&amp;lt;/localRepository&amp;gt;&lt;/code&gt; ，同时将 &lt;code&gt;setting&lt;/code&gt;  文件拷贝到 &lt;code&gt;C:\Users\Administrator\.m2&lt;/code&gt;  目录下，一般该目录下是没有 &lt;code&gt;setting&lt;/code&gt;  文件的，gradle 查找 jar 包顺序如下： &lt;code&gt;gradle默认会按以下顺序去查找本地的仓库：USER_HOME/.m2/settings.xml &amp;gt;&amp;gt; M2_HOME/conf/settings.xml &amp;gt;&amp;gt; USER_HOME/.m2/repository。&lt;/code&gt; &lt;br /&gt;
 &lt;code&gt;maven &amp;#123; url &amp;quot;http://maven.aliyun.com/nexus/content/groups/public/&amp;quot;&amp;#125;&lt;/code&gt; ：指定阿里云镜像加速地址&lt;br /&gt;
​	mavenCentral ()：这是 Maven 的中央仓库，无需配置，直接声明就可以使用。&lt;br /&gt;
​	jcenter ():JCenter 中央仓库，实际也是是用的 maven 搭建的，但相比 Maven 仓库更友好，通过 CDN 分发，并且支持 https 访问。&lt;br /&gt;
​	后面的 &lt;code&gt;maven &amp;#123; url 地址&amp;#125;&lt;/code&gt; ，指定 maven 仓库，一般用私有仓库地址或其它的第三方库。&lt;br /&gt;
​	gradle 按配置顺序寻找 jar 文件。如果本地存在就不会再去下载。不存在的再去 maven 仓库下载，这里注意下载下来的 jar 文件不在 maven 仓库里，而是在 gradle 的主工作目录下，如上面的 &lt;code&gt;D:\.gradle&lt;/code&gt;  目录。&lt;/p&gt;
&lt;h2 id=&#34;构建命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构建命令&#34;&gt;#&lt;/a&gt; 构建命令&lt;/h2&gt;
&lt;p&gt;清理命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gradle clean&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;构建打包命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gradle clean build&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编译时跳过测试，使用 &lt;code&gt;-x&lt;/code&gt; , &lt;code&gt;-x&lt;/code&gt;  参数用来排除不需要执行的任务&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gradle clean build -x &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;创建缓存依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建缓存依赖&#34;&gt;#&lt;/a&gt; 创建缓存依赖&lt;/h2&gt;
&lt;p&gt;执行命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gradle clean build --refresh-dependencies&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;或删除 &lt;code&gt;.gradle/caches&lt;/code&gt;  目录，构建的时候它会下载所有依赖并加入到缓存中。&lt;/p&gt;
&lt;h2 id=&#34;阿里云镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阿里云镜像&#34;&gt;#&lt;/a&gt; 阿里云镜像&lt;/h2&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;figcaption data-lang=&#34;groovy&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;buildscript &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    repositories &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        maven &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; url &lt;span class=&#34;token string&#34;&gt;&#39;http://maven.aliyun.com/nexus/content/groups/public/&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        maven&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; url &lt;span class=&#34;token string&#34;&gt;&#39;http://maven.aliyun.com/nexus/content/repositories/jcenter&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;gradlebuild构建脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gradlebuild构建脚本&#34;&gt;#&lt;/a&gt; gradle.build 构建脚本&lt;/h2&gt;
&lt;p&gt;​	build.gradle 是 Gradle 默认的构建脚本文件，执行 Gradle 命令的时候，会默认加载当前目录下的 build.gradle 脚本文件。&lt;br /&gt;
gradle.build 脚本如下：&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;figcaption data-lang=&#34;groovy&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;buildScript &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    repositories &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;         &lt;span class=&#34;token function&#34;&gt;mavenCentral&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repositories &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token function&#34;&gt;mavenCentral&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	 &lt;code&gt;buildScript&lt;/code&gt;  里的 &lt;code&gt;repositories&lt;/code&gt;  是这个脚本需要的依赖库，与项目无关，在执行脚本时，会从这个库里 download 对应的 jar 和插件。第二个 &lt;code&gt;repositories&lt;/code&gt;  是项目里需要依赖的 jar 的库。&lt;/p&gt;
&lt;h3 id=&#34;属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#属性&#34;&gt;#&lt;/a&gt; 属性&lt;/h3&gt;
&lt;p&gt;​	一个项目中只放置一个 &lt;code&gt;build.gradle&lt;/code&gt; ， &lt;code&gt;build.gradle&lt;/code&gt;  可以理解为一个 Project 框架，提供了对一个项目的基本配置。&lt;/p&gt;
&lt;p&gt;project 的常用:&lt;/p&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;group&lt;/li&gt;
&lt;li&gt;name(artifact)&lt;/li&gt;
&lt;li&gt;version 项目版本（全局的）&lt;/li&gt;
&lt;li&gt;sourceCompatibility = 1.8           //source 使用的 jdk 版本&lt;/li&gt;
&lt;li&gt;targetCompatibility = 1.8           // 编译时使用的 jdk 版本或者更新的 java 虚拟机兼容&lt;/li&gt;
&lt;li&gt;compileJava.options.encoding = &#39;UTF-8&#39;&lt;/li&gt;
&lt;li&gt;compileTestJava.options.encoding = &#39;UTF-8&#39;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;apply 应用插件&lt;/li&gt;
&lt;li&gt;dependencies 添加依赖&lt;/li&gt;
&lt;li&gt;repositories 添加仓库&lt;/li&gt;
&lt;li&gt;task 定义任务&lt;/li&gt;
&lt;li&gt;buildscript&lt;/li&gt;
&lt;li&gt;allprojects&lt;/li&gt;
&lt;li&gt;subprojects&lt;/li&gt;
&lt;li&gt;configurations&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gradle中的repositories&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gradle中的repositories&#34;&gt;#&lt;/a&gt; gradle 中的 repositories&lt;/h3&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;figcaption data-lang=&#34;groovy&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//repositories 是 project 一个方法，闭包作为参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;repositories &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;mavenCentral&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这个是用来指定使用什么库的，它可以存在 &lt;code&gt;buildScript&lt;/code&gt;  块、 &lt;code&gt;allprojects&lt;/code&gt;  块、根级别块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;buildScript&lt;/code&gt;  块&lt;/strong&gt;的 &lt;code&gt;repositories&lt;/code&gt;  主要是为了 Gradle 脚本自身的执行，获取脚本依赖插件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;根级别&lt;/strong&gt;的 &lt;code&gt;repositories&lt;/code&gt;  主要是为了当前项目提供所需依赖包，比如 log4j、spring-core 等依赖包可从 mavenCentral 仓库获得。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;allprojects 块&lt;/strong&gt;的 &lt;code&gt;repositories&lt;/code&gt;  用于多项目构建，为所有项目提供共同所需依赖包。而子项目可以配置自己的 &lt;code&gt;repositories&lt;/code&gt;  以获取自己独需的依赖包。&lt;/p&gt;
&lt;h3 id=&#34;gradle中的常用属性可以写在gradleproperties中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gradle中的常用属性可以写在gradleproperties中&#34;&gt;#&lt;/a&gt; gradle 中的常用属性可以写在 gradle.properties 中&lt;/h3&gt;
&lt;p&gt;一个 gradle 文件中的属性有很多，比如 jdk 版本，编码类型，dependency 版本。如果都放在 build.gradle 中势必不好管理哦（经验哦），那么 gradle 默认提供了一个 &lt;strong&gt;gradle.properties&lt;/strong&gt; 文件。用这个文件来管理所有的属性在合适不过了。&lt;/p&gt;
&lt;h2 id=&#34;查看项目已定义的所有task以及含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看项目已定义的所有task以及含义&#34;&gt;#&lt;/a&gt; 查看项目已定义的所有 task 以及含义&lt;/h2&gt;
&lt;p&gt;​	命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;gradle tasks&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;比如结果如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;assemble: 编译&lt;/li&gt;
&lt;li&gt;build：编译并执行测试&lt;/li&gt;
&lt;li&gt;clean：删除 build 目录&lt;/li&gt;
&lt;li&gt;jar： 生成 jar 包&lt;/li&gt;
&lt;li&gt;test：执行单元测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;settingsgradle配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#settingsgradle配置&#34;&gt;#&lt;/a&gt; settings.gradle 配置&lt;/h2&gt;
&lt;p&gt;​	模块 Module 的配置文件，大多数 setting.gradle 的作用是为了配置子工程，根目录下的 settings.gradle 脚本文件是针对 module 的全局配置，它的作用域所包含的所有 module 是通过 settings.gradle 来配置。&lt;br /&gt;
settings.gradle 用于创建多 Project 的 Gradle 项目。Project 在 IDEA 里对应 Module 模块。&lt;br /&gt;
例如配置 module 名 &lt;code&gt;rootProject.name = &#39;DyoonPLM&#39;&lt;/code&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.huanlee.cn/computer-science/java/ParallelStream%E5%B9%B6%E8%A1%8C%E6%B5%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
            <title>ParallelStream并行流使用注意事项</title>
            <link>http://blog.huanlee.cn/computer-science/java/ParallelStream%E5%B9%B6%E8%A1%8C%E6%B5%81%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
            <category term="计算机科学" scheme="http://blog.huanlee.cn/categories/computer-science/" />
            <category term="Java" scheme="http://blog.huanlee.cn/categories/computer-science/java/" />
            <pubDate>Tue, 22 Sep 2020 17:35:40 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;在使用 Java8 并发流时，自己对比在传统线程使用中的一些疑惑，通过百度和自己实践得出的问题记录&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;parallelstream简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#parallelstream简介&#34;&gt;#&lt;/a&gt; ParallelStream 简介&lt;/h1&gt;
&lt;p&gt;parallelStream 提供了流的并行处理，它是 Stream 的另一重要特性，其底层使用 Fork/Join 框架实现。简单理解就是多线程异步任务的一种实现。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; numbers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;asList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;numbers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parallelStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;输出：&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;因为并行流顾名思义它是多线程并行处理的，所以在运行时并不会按照我们原有的顺序输出。&lt;/p&gt;
&lt;h1 id=&#34;parallelstream的陷阱&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#parallelstream的陷阱&#34;&gt;#&lt;/a&gt; ParallelStream 的陷阱&lt;/h1&gt;
&lt;p&gt;由于并行流使用多线程，则一切线程安全问题都应该是需要考虑的问题，如：资源竞争、死锁、事务、可见性等等。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;concurrentFun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; listOfIntegers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            listOfIntegers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; parallelStorage &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        listOfIntegers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parallelStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt;parallelStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        parallelStorage&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEachOrdered&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;程序运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;62&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;72&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;74&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;68&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;70&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;92&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;82&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;96&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;84&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;86&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;98&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;76&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;54&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;52&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;58&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;38&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;44&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;48&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;46&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;为什么parallelstorage会有null元素&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么parallelstorage会有null元素&#34;&gt;#&lt;/a&gt; 为什么 parallelStorage 会有 null 元素？&lt;/h2&gt;
&lt;p&gt;首先，结合我们之前说的，并行流是使用多线程，那么在使用中我们需要考虑线程安全的问题，这里使用的 &lt;code&gt;ArrayList&lt;/code&gt;  我们知道是一个非线程安全的集合，所以我们分析出现这个情况的原因：&lt;br /&gt;
查看 &lt;code&gt;ArrayList&lt;/code&gt;  源码我们得知，它内部使用一个 &lt;code&gt;Object[] elementData;&lt;/code&gt;  来储存我们的数据， &lt;code&gt;int size&lt;/code&gt;  来记录集合长度，当我们进行 &lt;code&gt;add()&lt;/code&gt;  操作时，通过代码 &lt;code&gt;elementData[size++] = e;&lt;/code&gt;  来新增数据到内部数组中，那么我们可以认为向这个 ArrayList 中存储数据的过程可以分解为这么几步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取数组的长度存入 size&lt;/li&gt;
&lt;li&gt;向这个数组中储入元素 elementData [size]=e&lt;/li&gt;
&lt;li&gt;将 size+1&lt;/li&gt;
&lt;li&gt;保存 size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而对于 parrallelStorage 元素会有 &lt;code&gt;null&lt;/code&gt;  的原因就是多线程有可能同时读取到相同的下标 size 同时赋值，这样就会出现元素缺失的问题了。&lt;/p&gt;
&lt;h2 id=&#34;如何解决&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何解决&#34;&gt;#&lt;/a&gt; 如何解决？&lt;/h2&gt;
&lt;p&gt;既然知道了问题的源头是线程安全性导致的，那么我们只需要保证并发流中的代码一定是线程安全就能可以了，那么针对问题中的需求，我们只需要保证 &lt;code&gt;ArrayList&lt;/code&gt;  是线程安全的就能解决问题。&lt;br /&gt;
例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; listOfIntegers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      listOfIntegers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//List&amp;lt;Integer&gt; parallelStorage = new ArrayList&amp;lt;&gt;() ;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 使用线程安全的 List 集合&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; parallelStorage &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Collections&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;synchronizedList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    listOfIntegers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parallelStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; parallelStorage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    parallelStorage&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEachOrdered&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;92&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;72&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;66&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;88&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;34&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;96&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;98&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;94&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;44&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;74&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;48&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;68&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;82&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;70&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;46&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;84&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;86&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;38&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;62&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;78&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;64&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;80&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;76&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;58&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;52&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;54&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;果然输出结果中确实没有 &lt;code&gt;null&lt;/code&gt;  了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://blog.huanlee.cn/computer-science/blog/%E9%80%9A%E8%BF%87Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
            <title>通过Hexo搭建个人博客</title>
            <link>http://blog.huanlee.cn/computer-science/blog/%E9%80%9A%E8%BF%87Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
            <category term="计算机科学" scheme="http://blog.huanlee.cn/categories/computer-science/" />
            <category term="个人博客" scheme="http://blog.huanlee.cn/categories/computer-science/boke/" />
            <pubDate>Mon, 21 Sep 2020 16:40:40 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;note info&#34;&gt;
&lt;p&gt;以下为自己通过 hexo 搭建个人博客的笔记，记录自己的采坑历程，参考 hexo 官方文档和百度资料。&lt;br /&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;https://hexo.io/&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;什么是hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是hexo&#34;&gt;#&lt;/a&gt; 什么是 hexo？&lt;/h1&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h1&gt;
&lt;h2 id=&#34;安装前准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装前准备&#34;&gt;#&lt;/a&gt; 安装前准备&lt;/h2&gt;
&lt;p&gt;安装 Hexo 需要保证当前环境有以下应用程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXQtc2NtLmNvbS8=&#34;&gt;Git&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==&#34;&gt;Node.js&lt;/span&gt; (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装git&#34;&gt;#&lt;/a&gt; 安装 Git&lt;/h3&gt;
&lt;p&gt;因为我是用的是个人的 Centos 服务器，直接通过 yum 命令安装：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#安装 git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -y &lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#查看版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; version &lt;span class=&#34;token number&#34;&gt;1.8&lt;/span&gt;.3.1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;安装nodejs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装nodejs&#34;&gt;#&lt;/a&gt; 安装 Node.js&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从官网下下载最新的 nodejs，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==&#34;&gt;https://nodejs.org/en/download/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;上传安装包到服务器，并解压。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;tar&lt;/span&gt; -xvf node-v12.18.4-linux-x64.tar.xz&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;移动文件夹并且改名&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /usr/local/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; /home/node-v12.18.4-linux-x64 &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; //后面的.表示移动到当前目录&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mv&lt;/span&gt; node-v12.18.4-linux-x64/ nodejs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;让 npm 和 node 命令全局生效&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -s /usr/local/nodejs/bin/npm /usr/local/bin/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -s /usr/local/nodejs/bin/node /usr/local/bin/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;查看 Node.js 是否安装成功&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;node -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;v12.18.4&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; -v&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6.14&lt;/span&gt;.6&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;安装hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装hexo&#34;&gt;#&lt;/a&gt; 安装 Hexo&lt;/h2&gt;
&lt;p&gt;所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -g hexo-cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;遇到问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#遇到问题&#34;&gt;#&lt;/a&gt; 遇到问题&lt;/h3&gt;
&lt;p&gt;这里安装完成后，执行会提示如下错误，通过添加环境变量或者添加链接解决&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo init &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;-bash: hexo: 未找到命令&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;添加链接解决方式：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ln&lt;/span&gt; -s /node_modules/.bin/hexo /usr/local/bin/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始化&#34;&gt;#&lt;/a&gt; 初始化&lt;/h1&gt;
&lt;p&gt;Hexo 安装完成后通过初始化命令构建一个 hexo 项目。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo init&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;初始化完成后，通过预览命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo s&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;发布一个本地博客服务，在网页访问 ip + 默认端口 &lt;code&gt;ip:4000&lt;/code&gt;  就能看到效果了。&lt;/p&gt;
&lt;h1 id=&#34;创建新文章&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建新文章&#34;&gt;#&lt;/a&gt; 创建新文章&lt;/h1&gt;
&lt;p&gt;博客仅仅是能看到还没有用，我们需要发布自己的内容上去，那么通过命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# [layout] 为布局，可选项为 `post`、`page`、`draft`，这将决定文章所在文件路径。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# &amp;lt;title&gt; 为文章标题&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 如 hexo new post 新的博客&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo new &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;layout&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行命令后，会在布局路径下生成 &lt;code&gt;[文章标题].md&lt;/code&gt;  的文件，填充文件内容就可以了。&lt;/p&gt;
&lt;h1 id=&#34;部署&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署&#34;&gt;#&lt;/a&gt; 部署&lt;/h1&gt;
&lt;p&gt;新写了一篇博客后，需要发布到网络上分享给自己的朋友，虽然通过前面的本地预览命令 &lt;code&gt;hexo s&lt;/code&gt;  也能达到效果，但是我这里使用 &lt;code&gt;nginx&lt;/code&gt;  发布：&lt;br /&gt;
首先我们需要把刚写的博客编译成网页，通过命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hexo g&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编译完成后，所有的网页文件都在根目录下的 &lt;code&gt;public&lt;/code&gt;  文件夹中，那么我们只需要将 &lt;code&gt;nginx&lt;/code&gt;  配置中静态文件地址的路径指向 &lt;code&gt;&amp;lt;root&amp;gt;/public/&lt;/code&gt;  就可以了。&lt;br /&gt;
然后直接访问 &lt;code&gt;nginx&lt;/code&gt;  地址就能看到我们新发布的博客了。&lt;/p&gt;
&lt;h1 id=&#34;更换主题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更换主题&#34;&gt;#&lt;/a&gt; 更换主题&lt;/h1&gt;
&lt;p&gt;有了自己的博客肯定想要他变得和别人的不一样，我们可以通过更换主题的方式来装修自己的博客，让它变得与众不同。&lt;br /&gt;
我们可以在 &lt;code&gt;Hexo&lt;/code&gt;  的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=&#34;&gt;主题列表&lt;/span&gt;中选择一个自己喜欢的主题。&lt;br /&gt;
以博主使用的主题： &lt;code&gt;Shake&lt;/code&gt;  为例：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# cd your-blog&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td data-command=&#34;[root@localhost] $&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在博客根目录下执行上面的代码拉取主题到本地 &lt;code&gt;themes&lt;/code&gt;  文件夹中，主题文件的保存地址应该为 &lt;code&gt;&amp;lt;root&amp;gt;/themes/shoka&lt;/code&gt; ，然后修改根目录下 &lt;code&gt;_config.yml&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-YMAL&#34;&gt;theme: shoka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示使用本地主题 &lt;code&gt;shoka&lt;/code&gt; , 然后执行上文中的编译部署看看新主题的效果吧。&lt;/p&gt;
&lt;h1 id=&#34;更多&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#更多&#34;&gt;#&lt;/a&gt; 更多&lt;/h1&gt;
&lt;p&gt;当然， &lt;code&gt;Hexo&lt;/code&gt;  的功能不仅仅于此，还有很多的功能需要我们去探索。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
